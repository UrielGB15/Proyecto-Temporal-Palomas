tags$h2("Psychology-Statistics"))), #Titulo
tags$hr(),
wellPanel(
fluidRow(
#Los numeros es el ancho de cada columna dentro de esa fila,
column(6,sliderInput(inputId = "mean1",
label="Mean Blue Distribution",
value=35,min=1,max=50),
sliderInput(inputId = "sd1",
label="Standar Deviation Blue Distribution",
value=5,min=2,max=10)),
column(6, sliderInput(inputId = "mean2",
label="Mean Red Distribution",
value=15,min=1,max=50),
sliderInput(inputId = "sd2",
label="Standar Deviation Red Distribution",
value=5,min=2,max=10))
),
plotOutput("hist")
))
server <- function(input, output){
media1 <- reactive({input$mean1})
media2 <- reactive({input$mean2})
desv1 <- reactive({input$sd1})
desv2 <- reactive({input$sd2})
output$hist <- renderPlot({
shade_under_curve <- function(fun, xmin, xmax, length=1){
xvals <- seq(-100, 100, length=length)
dvals <- match.fun(fun)(xvals)
polygon(c(xvals,rev(xvals)),c(rep(0,length),rev(dvals)),col="gray")
}
y1 <- function(x)sapply(x, function(xt)dnorm(xt,mean=media1(),sd=desv1()))
y2 <- function(x)sapply(x, function(xt)dnorm(xt,mean=media2(),sd=desv2()))
my.fun <- function(x){sapply(x, function(xt)min(y1(xt), y2(xt)))}
plot(y1, xlim=c(-10,60),ylim=c(0.01,.2),col="skyblue",lwd=5)
curve(y2, add=TRUE, col="red",lwd=5)
shade_under_curve(my.fun,-10, 10, length=1000)
})
}
shinyApp(ui = ui, server = server)
rm(list=ls())
library(shiny)
ui <- fluidPage(
fluidRow(
column(3,tags$img(height=130, width=130, src="NTU.jpg")),
column(9,tags$h1("Nottingham Trent University"),
tags$h2("Psychology-Statistics"))), #Titulo
tags$hr(),
wellPanel(
fluidRow(
#Los numeros es el ancho de cada columna dentro de esa fila,
column(6,sliderInput(inputId = "mean1",
label="Mean Blue Distribution",
value=35,min=1,max=50),
sliderInput(inputId = "sd1",
label="Standar Deviation Blue Distribution",
value=5,min=2,max=10)),
column(6, sliderInput(inputId = "mean2",
label="Mean Red Distribution",
value=15,min=1,max=50),
sliderInput(inputId = "sd2",
label="Standar Deviation Red Distribution",
value=5,min=2,max=10))
),
plotOutput("hist")
))
server <- function(input, output){
media1 <- reactive({input$mean1})
media2 <- reactive({input$mean2})
desv1 <- reactive({input$sd1})
desv2 <- reactive({input$sd2})
n <- 100
output$hist <- renderPlot({
shade_under_curve <- function(fun, xmin, xmax, length=n){
xvals <- seq(-100, 100, length=length)
dvals <- match.fun(fun)(xvals)
polygon(c(xvals,rev(xvals)),c(rep(0,length),rev(dvals)),col="gray")
}
y1 <- function(x)sapply(x, function(xt)dnorm(xt,mean=media1(),sd=desv1()))
y2 <- function(x)sapply(x, function(xt)dnorm(xt,mean=media2(),sd=desv2()))
my.fun <- function(x){sapply(x, function(xt)min(y1(xt), y2(xt)))}
plot(y1, xlim=c(-10,60),ylim=c(0.01,.2),col="skyblue",lwd=5)
curve(y2, add=TRUE, col="red",lwd=5)
shade_under_curve(my.fun,-10, 10, length=1000)
})
}
shinyApp(ui = ui, server = server)
xvals <- seq(-100, 100, length=length)
seq(-100,100,1)
rm(list=ls())
library(shiny)
ui <- fluidPage(
fluidRow(
column(3,tags$img(height=130, width=130, src="NTU.jpg")),
column(9,tags$h1("Nottingham Trent University"),
tags$h2("Psychology-Statistics"))), #Titulo
tags$hr(),
wellPanel(
fluidRow(
#Los numeros es el ancho de cada columna dentro de esa fila,
column(6,sliderInput(inputId = "mean1",
label="Mean Blue Distribution",
value=35,min=1,max=50),
sliderInput(inputId = "sd1",
label="Standar Deviation Blue Distribution",
value=5,min=2,max=10)),
column(6, sliderInput(inputId = "mean2",
label="Mean Red Distribution",
value=15,min=1,max=50),
sliderInput(inputId = "sd2",
label="Standar Deviation Red Distribution",
value=5,min=2,max=10))
),
plotOutput("hist")
))
server <- function(input, output){
media1 <- reactive({input$mean1})
media2 <- reactive({input$mean2})
desv1 <- reactive({input$sd1})
desv2 <- reactive({input$sd2})
n <- 100
output$hist <- renderPlot({
shade_under_curve <- function(fun, xmin, xmax){
xvals <- seq(-100, 100, n)
dvals <- match.fun(fun)(xvals)
polygon(c(xvals,rev(xvals)),c(rep(0,length),rev(dvals)),col="gray")
}
y1 <- function(x)sapply(x, function(xt)dnorm(xt,mean=media1(),sd=desv1()))
y2 <- function(x)sapply(x, function(xt)dnorm(xt,mean=media2(),sd=desv2()))
my.fun <- function(x){sapply(x, function(xt)min(y1(xt), y2(xt)))}
plot(y1, xlim=c(-10,60),ylim=c(0.01,.2),col="skyblue",lwd=5)
curve(y2, add=TRUE, col="red",lwd=5)
shade_under_curve(my.fun,-10, 10, length=1000)
})
}
shinyApp(ui = ui, server = server)
rm(list=ls())
library(shiny)
ui <- fluidPage(
fluidRow(
column(3,tags$img(height=130, width=130, src="NTU.jpg")),
column(9,tags$h1("Nottingham Trent University"),
tags$h2("Psychology-Statistics"))), #Titulo
tags$hr(),
wellPanel(
fluidRow(
#Los numeros es el ancho de cada columna dentro de esa fila,
column(6,sliderInput(inputId = "mean1",
label="Mean Blue Distribution",
value=35,min=1,max=50),
sliderInput(inputId = "sd1",
label="Standar Deviation Blue Distribution",
value=5,min=2,max=10)),
column(6, sliderInput(inputId = "mean2",
label="Mean Red Distribution",
value=15,min=1,max=50),
sliderInput(inputId = "sd2",
label="Standar Deviation Red Distribution",
value=5,min=2,max=10))
),
plotOutput("hist")
))
server <- function(input, output){
media1 <- reactive({input$mean1})
media2 <- reactive({input$mean2})
desv1 <- reactive({input$sd1})
desv2 <- reactive({input$sd2})
n <- 100
output$hist <- renderPlot({
shade_under_curve <- function(fun, xmin, xmax, length=n){
xvals <- seq(-100, 100, length=length)
dvals <- match.fun(fun)(xvals)
polygon(c(xvals,rev(xvals)),c(rep(0,length),rev(dvals)),col="gray")
}
y1 <- function(x)sapply(x, function(xt)dnorm(xt,mean=media1(),sd=desv1()))
y2 <- function(x)sapply(x, function(xt)dnorm(xt,mean=media2(),sd=desv2()))
my.fun <- function(x){sapply(x, function(xt)min(y1(xt), y2(xt)))}
plot(y1, xlim=c(-10,60),ylim=c(0.01,.2),col="skyblue",lwd=5)
curve(y2, add=TRUE, col="red",lwd=5)
shade_under_curve(my.fun,-10, 10, length=1000)
})
}
shinyApp(ui = ui, server = server)
?sapply
runApp('Desktop/R_Shiny/NTU_Darren')
plot(y1, xlim=c(-10,60),ylim=c(0.01,.2),col="skyblue",lwd=5)
source('~/.active-rstudio-document')
rm(list=ls())
library(shiny)
ui <- fluidPage(
fluidRow(
column(3,tags$img(height=130, width=130, src="NTU.jpg")),
column(9,tags$h1("Nottingham Trent University"),
tags$h2("Psychology-Statistics"))), #Titulo
tags$hr(),
wellPanel(
fluidRow(
#Los numeros es el ancho de cada columna dentro de esa fila,
column(6,sliderInput(inputId = "mean1",
label="Mean Blue Distribution",
value=35,min=1,max=50),
sliderInput(inputId = "sd1",
label="Standar Deviation Blue Distribution",
value=5,min=2,max=10)),
column(6, sliderInput(inputId = "mean2",
label="Mean Red Distribution",
value=15,min=1,max=50),
sliderInput(inputId = "sd2",
label="Standar Deviation Red Distribution",
value=5,min=2,max=10))
),
plotOutput("hist")
))
server <- function(input, output){
media1 <- reactive({input$mean1})
media2 <- reactive({input$mean2})
desv1 <- reactive({input$sd1})
desv2 <- reactive({input$sd2})
n <- 100
output$hist <- renderPlot({
shade_under_curve <- function(fun, xmin, xmax, length=n){
xvals <- seq(-100, 100, length=length)
dvals <- match.fun(fun)(xvals)
polygon(c(xvals,rev(xvals)),c(rep(0,length),rev(dvals)),col="gray")
}
y1 <- function(x)sapply(x, function(xt)dnorm(xt,mean=media1(),sd=desv1()))
y2 <- function(x)sapply(x, function(xt)dnorm(xt,mean=media2(),sd=desv2()))
my.fun <- function(x){sapply(x, function(xt)min(y1(xt), y2(xt)))}
plot(y1, xlim=c(-10,60),ylim=c(0.01,.2),col="skyblue",lwd=5)
curve(y2, add=TRUE, col="red",lwd=5)
shade_under_curve(my.fun,-10, 10, length=1000)
})
}
shinyApp(ui = ui, server = server)
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
rm(list=ls())
library(shiny)
ui <- fluidPage(
fluidRow(
column(3,tags$img(height=130, width=130, src="NTU.jpg")),
column(9,tags$h1("Nottingham Trent University"),
tags$h2("Psychology-Statistics"))), #Titulo
tags$hr(),
wellPanel(
fluidRow(
#Los numeros es el ancho de cada columna dentro de esa fila,
column(5,sliderInput(inputId = "mean1",
label="Mean Blue Distribution",
value=35,min=1,max=50),
sliderInput(inputId = "sd1",
label="Standar Deviation Blue Distribution",
value=5,min=2,max=10)),
column(5, sliderInput(inputId = "mean2",
label="Mean Red Distribution",
value=15,min=1,max=50),
sliderInput(inputId = "sd2",
label="Standar Deviation Red Distribution",
value=5,min=2,max=10)),
column(2, sliderInput(inputId = "N",
label="N",
value=30,min=10,max=100)))
),
plotOutput("hist")
)
server <- function(input, output){
media1 <- reactive({input$mean1})
media2 <- reactive({input$mean2})
desv1 <- reactive({input$sd1})
desv2 <- reactive({input$sd2})
output$hist <- renderPlot({
s <- seq(-100,100,.5)
dist1 <- curve(dnorm(x,mean=media1(),sd=desv1()),type="l",lwd=5,col="skyblue2",
xlim = c(-10,65),ylim=c(0.009, .20),
xlab = "Values",ylab="Density")
dist2 <- curve(dnorm(x,mean=media2(),sd=desv2()),type="l",lwd=5,col="red",add=TRUE)
polygon(dist1$x, pmin(dist1$y,dist2$y),col="dark gray")
# plot(s, dnorm(s,media1(), desv1()), type="l",col="skyblue",lwd=5,
#      xlab = "Value", ylab = "Density",ylim=c(0,.185),xlim=c(0,50))
# lines(s, dnorm(s,media2(),desv2()), col="red",lwd=5)
# n <- length(s)
# t <- (media1() + media2()) / (((desv1()/n)+(desv2()/n))**.5)
# text(x = 5, y = 0.15,labels = paste("t test:",t))
})
}
shinyApp(ui = ui, server = server)
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
?text
runApp('Desktop/R_Shiny/NTU_Darren')
?font
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
?labels
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
?curve
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
?column
shiny::runApp('Desktop/R_Shiny/NTU_Darren')
?column
i <- fluidPage(
fluidRow(
column(width = 4,
"4"
),
column(width = 3, offset = 2,
"3 offset 2"
)
)
)
shinyApp(ui, server = function(input, output) { })
}
ui <- fluidPage(
fluidRow(
column(width = 4,
"4"
),
column(width = 3, offset = 2,
"3 offset 2"
)
)
)
shinyApp(ui, server = function(input, output) { })
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
runApp('Desktop/R_Shiny/NTU_Darren')
a=matrix(2,2)
a
a=matrix(2,2;2,2)
a=matrix(c(2,22,2),c(3,3,3))
a
c(3,3,3))
a=matrix(nrow = 2,ncol = 3)
A
A
a
a[1,1]
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document')
rnorm(mean = 0, sd = 224.58)
rnorm(mean = 0, sd = 224.58,n = 20)
224.58**2
224.58**.5
rnorm(mean = 0, sd = 14.98599,n = 20)
x <- rnorm(mean = 0, sd = 14.98599,n = 20)
y <- matrix(data = rep(x = 50,20),nrow = 17,ncol = 4)
rep(x = 50)
rep(50,20)
y <- matrix(data = rep(x = 50,20),nrow = 5,ncol = 4)
x
y
x+y
x+y
x+y
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
rm(list=ls())
setwd("~/Desktop/untitled folder/Condicion_Neutro1")
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
source('~/Desktop/multiple.R')
